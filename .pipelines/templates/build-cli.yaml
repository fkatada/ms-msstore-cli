parameters:
  dotnet_runtime: ''
  dotnet_framework: ''
  dotnet_arch: ''
  dotnet_configuration: ''
  AgentOS: ''
  DoEsrp: false
  signingIdentity:
    serviceName: ''
    appId: ''
    tenantId: ''
    akvName: ''
    authCertName: ''
    signCertName: ''

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . nbgv
  displayName: Install NBGV tool
- bash: |
    echo "##vso[task.setvariable variable=AgentOS;]${{ parameters.AgentOS }}"
- script: ./nbgv cloud
  condition: startsWith(variables.AgentOS, 'Darwin')
  displayName: Set Version MacOS
- script: nbgv cloud
  condition: not(startsWith(variables.AgentOS, 'Darwin'))
  displayName: Set Version
- script: dotnet build MSStore.CLI --no-restore --no-self-contained -r ${{ parameters.dotnet_runtime }}-${{ parameters.dotnet_arch }} -f ${{ parameters.dotnet_framework }} /p:Configuration=${{ parameters.dotnet_configuration }}
  displayName: Build CLI
- task: DownloadPipelineArtifact@2
  inputs:
    buildType: 'current'
    artifactName: 'NuGetDLLs'
    targetPath: '$(System.DefaultWorkingDirectory)/MSStore.CLI/bin/${{ parameters.dotnet_configuration }}/${{ parameters.dotnet_framework }}/${{ parameters.dotnet_runtime }}-${{ parameters.dotnet_arch }}'
- script: dotnet publish MSStore.CLI --no-build --no-self-contained -r ${{ parameters.dotnet_runtime }}-${{ parameters.dotnet_arch }} -f ${{ parameters.dotnet_framework }} /p:Configuration=${{ parameters.dotnet_configuration }} /p:PublishProfile=${{ parameters.dotnet_runtime }}-${{ parameters.dotnet_arch }}
  displayName: Publish NoSelfContained CLI
- ${{ if eq(parameters['DoEsrp'], 'true') }}:
  - task: EsrpCodeSigning@5
    displayName: Code Sign ESRP - CLI - 3rd Party Dependencies
    condition: startsWith(variables.AgentOS, 'Windows_NT')
    inputs:
      ConnectedServiceName: ${{ parameters.signingIdentity.serviceName }}
      AppRegistrationClientId: ${{ parameters.signingIdentity.appId }}
      AppRegistrationTenantId: ${{ parameters.signingIdentity.tenantId }}
      AuthAKVName: ${{ parameters.signingIdentity.akvName }}
      AuthCertName: ${{ parameters.signingIdentity.authCertName }}
      AuthSignCertName: ${{ parameters.signingIdentity.signCertName }}
      FolderPath: '$(System.DefaultWorkingDirectory)/MSStore.CLI/bin/${{ parameters.dotnet_configuration }}/${{ parameters.dotnet_framework }}/${{ parameters.dotnet_runtime }}-${{ parameters.dotnet_arch }}/publish'
      Pattern: |
        Meziantou.Framework.Win32.CredentialManager.dll,
        Spectre.Console.dll,
        SkiaSharp.dll,
      signConfigType: inlineSignParams
      inlineOperation: |
        [
            {
                "KeyCode": "CP-231522",
                "OperationCode": "SigntoolSign",
                "Parameters": {
                    "OpusName": "Microsoft",
                    "OpusInfo": "http://www.microsoft.com",
                    "Append": "/as",
                    "FileDigest": "/fd \"SHA256\"",
                    "PageHash": "/NPH",
                    "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                },
                "ToolName": "sign",
                "ToolVersion": "1.0"
            },
            {
                "KeyCode": "CP-231522",
                "OperationCode": "SigntoolVerify",
                "Parameters": {},
                "ToolName": "sign",
                "ToolVersion": "1.0"
            }
        ]
  - task: EsrpCodeSigning@5
    displayName: Code Sign ESRP - CLI Windows + Existing DLLs & Authenticode
    condition: startsWith(variables.AgentOS, 'Windows_NT')
    inputs:
      ConnectedServiceName: ${{ parameters.signingIdentity.serviceName }}
      AppRegistrationClientId: ${{ parameters.signingIdentity.appId }}
      AppRegistrationTenantId: ${{ parameters.signingIdentity.tenantId }}
      AuthAKVName: ${{ parameters.signingIdentity.akvName }}
      AuthCertName: ${{ parameters.signingIdentity.authCertName }}
      AuthSignCertName: ${{ parameters.signingIdentity.signCertName }}
      FolderPath: '$(System.DefaultWorkingDirectory)/MSStore.CLI/bin/${{ parameters.dotnet_configuration }}/${{ parameters.dotnet_framework }}/${{ parameters.dotnet_runtime }}-${{ parameters.dotnet_arch }}/publish'
      Pattern: |
        msstore.exe
        msstore.dll
        MSStore.API.dll
        Microsoft.*.dll
        !Microsoft.Windows.SDK.NET.dll
        System.CommandLine*.dll
        !System.CommandLine.resources.dll
      UseMinimatch: true
      signConfigType: inlineSignParams
      inlineOperation: |
        [
            {
                "KeyCode": "CP-230012",
                "OperationCode": "SigntoolSign",
                "Parameters": {
                    "OpusName": "Microsoft Store CLI",
                    "OpusInfo": "https://github.com/Microsoft/msstore-cli",
                    "FileDigest": "/fd \"SHA256\"",
                    "PageHash": "/PH",
                    "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                },
                "ToolName": "sign",
                "ToolVersion": "1.0"
            },
            {
                "KeyCode": "CP-230012",
                "OperationCode": "SigntoolVerify",
                "Parameters": {},
                "ToolName": "sign",
                "ToolVersion": "1.0"
            }
        ]
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      New-Item -ItemType File -Path "$(System.DefaultWorkingDirectory)\MSStore.CLI.MSIX\obj\${{ parameters.dotnet_arch }}\appxmanifest.xml" -Force
      Copy-Item "$(System.DefaultWorkingDirectory)\MSStore.CLI.MSIX\Package.Store.appxmanifest" -Destination "$(System.DefaultWorkingDirectory)\MSStore.CLI.MSIX\obj\${{ parameters.dotnet_arch }}\appxmanifest.xml" -Force
      [xml]$manifest = get-content "$(System.DefaultWorkingDirectory)\MSStore.CLI.MSIX\obj\${{ parameters.dotnet_arch }}\appxmanifest.xml"
      $manifest.Package.Identity.Version = '$(GitBuildVersionSimple).0'
      $manifest.Package.Identity.SetAttribute('ProcessorArchitecture', '${{ parameters.dotnet_arch }}')
      $manifest.Save((Resolve-Path "$(System.DefaultWorkingDirectory)\MSStore.CLI.MSIX\obj\${{ parameters.dotnet_arch }}\appxmanifest.xml"))
  condition: startsWith(variables.AgentOS, 'Windows_NT')
  displayName: Version Package Manifest
- script: dotnet msbuild $(System.DefaultWorkingDirectory)\MSStore.CLI.MSIX\MSStore.CLI.MSIX.proj -target:MakeMSIX /p:Platform=${{ parameters.dotnet_arch }} /p:MakeMsixOutputFilename=MSStore.CLI.MSIX_$(GitBuildVersionSimple).0_${{ parameters.dotnet_arch }}.msix /p:PublishFolderPath=$(System.DefaultWorkingDirectory)\MSStore.CLI\bin\${{ parameters.dotnet_configuration }}\${{ parameters.dotnet_framework }}\${{ parameters.dotnet_runtime }}-${{ parameters.dotnet_arch }}\publish\
  condition: startsWith(variables.AgentOS, 'Windows_NT')
  displayName: Build CLI MSIX
- task: CopyFiles@2
  displayName: 'Copy CLI Artifacts'
  inputs:
    sourceFolder: '$(System.DefaultWorkingDirectory)/MSStore.CLI/bin/${{ parameters.dotnet_configuration }}/${{ parameters.dotnet_framework }}/${{ parameters.dotnet_runtime }}-${{ parameters.dotnet_arch }}/publish/'
    targetFolder: '$(Build.ArtifactStagingDirectory)/CLI'
    Contents: |
      **
      !*.md
- task: 1ES.PublishPipelineArtifact@1
  displayName: Upload Artifact - CLI
  inputs:
    path: '$(Build.ArtifactStagingDirectory)/CLI'
    artifactName: CLI-${{ parameters.dotnet_runtime }}-${{ parameters.dotnet_arch }}
- task: CopyFiles@2
  displayName: 'Copy MSIX Artifacts'
  condition: startsWith(variables.AgentOS, 'Windows_NT')
  inputs:
    sourceFolder: '$(System.DefaultWorkingDirectory)/MSStore.CLI.MSIX/AppPackages/${{ parameters.dotnet_arch }}/'
    contents: 'MSStore.CLI.MSIX_*_${{ parameters.dotnet_arch }}.msix'
    targetFolder: '$(Build.ArtifactStagingDirectory)/MSIX'
- task: 1ES.PublishPipelineArtifact@1
  condition: startsWith(variables.AgentOS, 'Windows_NT')
  displayName: Upload Artifact - MSIX
  inputs:
    path: '$(Build.ArtifactStagingDirectory)/MSIX'
    artifactName: MSIX-${{ parameters.dotnet_arch }}